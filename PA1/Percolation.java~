public class Percolation {
   private byte[] grid;
   private WeightedQuickUnionUF qf;
   private int size;
   private boolean percolate;
   //private byte max;
   public Percolation(int N)     // create N-by-N grid, with all sites blocked
     {
       if (N > 0)
       { 
         size = N;
         grid = new byte[N*N]; 
         qf = new WeightedQuickUnionUF(N*N);
         //max = 0;
         percolate = false;
       }
       else
       {
         throw new java.lang.IllegalArgumentException();
       }
     }
public void open(int i, int j)//open site (row i, column j) if it is not open already
     {
       if (i > 0 && i < size+1 && j > 0 && j < size+1)
       {
          if (grid[(i-1)*size + j-1] == 0)
          {
               int m = 1;
               grid[(i-1)*size + j-1] = 1;
               if (i == 1)
               {
                  grid[(i-1)*size + j-1] = 3;
                  m = m*3;
               }
               
               if (i == size)
               {
                   if (grid[(i-1)*size + j-1] < 2)
                   {
                      grid[(i-1)*size + j-1] = 2;
                   }
                   m = m*2;
               }
               byte maxStatus = grid[(i-1)*size + j-1];
               m = m * maxStatus;
               if (j < size && isOpen(i , j+1))
               {
                   int id = qf.find((i-1)*size + j);
                   if (maxStatus < grid[id])
                   {
                       maxStatus = grid[id];
                   }
                   m = m * grid[id];
                   qf.union((i-1)*size + j-1, (i-1)*size + j);
               }
               if (j > 1 && isOpen(i, j-1))
               {
//                   if ( topConnectedness[i-1][j-2]) 
//                   {
//                       topConnectedness[i-1][j-1] = true;
//                   }
                   int id = qf.find((i-1)*size + j-2);
                    if (maxStatus < grid[id])
                   {
                       maxStatus = grid[id];
                   }
                    m = m * grid[id];
                    qf.union((i-1)*size + j-1, (i-1)*size + j-2);
                    //System.out.println("Call this: maxStatus = " + maxStatus);
               }
               if (i < size && isOpen(i+1, j))
               {
//                   if ( topConnectedness[i][j-1]) 
//                   {
//                       topConnectedness[i-1][j-1] = true;
//                   }
                   int id = qf.find(i*size + j-1);
                   if (maxStatus < grid[id])
                   {
                       maxStatus = grid[id];
                   }
                   m = m * grid[id];
                   qf.union((i-1)*size + j-1, i*size + j-1);
                   //System.out.println("Call this: maxStatus = " + maxStatus);
               }
               if (i > 1 && isOpen(i-1, j))
               {
//                   if ( topConnectedness[i-2][j-1]) 
//                   {
//                       topConnectedness[i-1][j-1] = true;
//                   }
                   int id = qf.find((i-2)*size + j-1);
                   //System.out.println("Call this: maxStatus = " + maxStatus + " " +grid[id] );
                   if (maxStatus < grid[id])
                   {
                       maxStatus = grid[id];
                       
                   }
                   m = m * grid[id];
                   qf.union((i-1)*size + j-1, (i-2)*size + j-1);
                   //System.out.println("Call this: maxStatus = " + maxStatus);
               }           
               int id = qf.find((i-1)*size + j-1);
               grid[id] = maxStatus;
               if (!percolate && m%6 == 0)
               {
                   percolate = true;
               }
          }
       }
       else
       {
          //System.out.println(String.format("Size of input: %d", size));
          throw new java.lang.IndexOutOfBoundsException();
       }
     }
   public boolean isOpen(int i, int j)     // is site (row i, column j) open?
     {
       if (i > 0 && i < size+1 && j > 0 && j < size+1)
       {
         return grid[(i-1)*size + j-1] != 0;
       }
       else
       {
           //return false;
          throw new java.lang.IndexOutOfBoundsException();
       }
     }
   public boolean isFull(int i, int j)     // is site (row i, column j) full?
   {
      if (i > 0 && i < size+1 && j > 0 && j < size+1)
      {
         //if (isOpen(i,j))
         //{
               return grid[qf.find((i-1)*size + j-1)] == 3;
         //}
         //return false;
       }
       else
       {
          throw new java.lang.IndexOutOfBoundsException();
       }
   }
   public boolean percolates()             // does the system percolate?
   {
     //logic here
       //System.out.println("max : " + max);
      //return max == 3;
       return percolate;
   }

   public static void main(String[] args)   // test client (optional)
   {
      In input = new In("/user/hunnguye/home/algs4/PA/PA1/percolation/" + args[0]);
      int[] inn = input.readAllInts();
      Percolation data = new Percolation(inn[0]);
      //System.out.println(String.format("Size of input: %d", inn.length));
      for (int i = 1; i < inn.length/2; i++)
      {
         
          data.open(inn[2*i+1], inn[2*i+2]);
      }
      if (data.percolates())
      {
          System.out.println("This net is percolates");
      }
      else
      {
          System.out.println("This net is not percolates");
      }
   }
}